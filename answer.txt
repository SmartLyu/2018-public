JSON文件格式
 
    简介： JSON是JavaScript对象表示法,它是一种基于文本独立于语言的轻量级数据交换格式

   JSON中的分隔符限于
单引号" ' " 双引号 " ' "	用来规划一个数据值
小括号" () "	分组使用
中括号" [ ] "	定义一个数组，用逗号分隔	[ "k1":"v1" , "k2" , "kn" ]
大括号" { } "	多个键值对，用逗号分隔	{ "k1":"v1" , "k2":"v3" , "kn":"vn" }
冒号 " : " 	一个键值对，
逗号 " , "	分隔数据用的

   注意： 空格是没有限制要求的，也不写都一样，空格不算一个分隔符号。
          如果想让空格成为一个字符，要用\转义，也就是 "\    " 代表一串空格字符。

JSON由简到繁的演变过程


# 一个数据库，它里面由MySQL
{
   "数据库" : "MySQL"
}

# 一个数据库，它里面由MySQL,MongoDB,Redis
{
   "数据库" : [ "MySQL" , "MongoDB" , "Redis" ]
}

# 一个数据库，它里面由MySQL,MongoDB,Redis，而MySQL它详细信息为，关系型数据库，其市场上的主流软件为Mariadb,Oracle。
{
   "数据库" : [ 
    { "MySQL" : "关系型数据库" , "市场软件" : [ "Mariadb" , "Oracle" ] },
    "MongoDB" ,
    { "Redis" : { "非关系型数据库" : "NoSQL" } }
    ]
}


# 一个数据库，它里面由MySQL,MongoDB,Redis，而MySQL它详细信息为，关系型数据库，其市场上的主流软件为Mariadb,Oracle，其中，Mariadb是免费开源软件、Oracle是付费闭源软件，其开发公司为甲骨文
{
   "数据库" : [ 
    {
      "MySQL" : "关系型数据库" , 
        "市场软件" : [
          { "Mariadb" : "免费开源" },
          { "Oracle" : "付费闭源" , "公司" : "甲骨文" }
         ] 
      },
    "MongoDB" ,
    { "Redis" : { "非关系型数据库" : "NoSQL" } }
    ]
}


    其实原理比较简单，只不过可以反复嵌套，因此会生成很复杂的JSON文件




YAML数据格式
    实质是： 用来表达数据序列的格式

    基础语法：
       1. YAML的结构通过空格来展示，不使用逗号！
       2. 数组使用"- "来表示，注意是 减号空格
       3. 键值对使用": "来表示，注意是 冒号空格
       4. YAML使用一个固定的缩进风格表示数据层级结构关系
       5. 一般每个缩进级别由两个以上空格组成
       6. 使用 # 表示注释

    注意:
       不要使用tab,缩进是初学者容易出错的地方之一
       同一层级缩进必须对齐
       开头需要写 --- 表示文件开始

YAML由简到繁的演变过程


# 一个数据库，它里面由MySQL

"数据库": "MySQL"

# 一个数据库，它里面由MySQL,MongoDB,Redis

"数据库": 
   - "MySQL"
   - "MongoDB"
   - "Redis"

# 一个数据库，它里面由MySQL,MongoDB,Redis，而MySQL它详细信息为，关系型数据库，其市场上的主流软件为Mariadb,Oracle。

"数据库": 
   - "MySQL": "关系型数据库"
     "市场软件":
      - "Mariadb"
      - "Oracle"
   - "MongoDB"
   - "Redis": "关系型数据库"： "NoSQL"


# 一个数据库，它里面由MySQL,MongoDB,Redis，而MySQL它详细信息为，关系型数据库，其市场上的主流软件为Mariadb,Oracle，其中，Mariadb是免费开源软件、Oracle是付费闭源软件，其开发公司为甲骨文

"数据库": 
   - "MySQL": "关系型数据库"
     "市场软件":
      - "Mariadb": "免费开源"
      - "Oracle": "付费闭源"
        "公司" : "甲骨文"
   - "MongoDB"
   - "Redis": 
      "关系型数据库"： "NoSQL"



JSON和YAML文件格式

    这两个格式可以相互转换，JSON分隔符号比较多，{} []  ,  等，而YAML内只有空格作为分隔符号，由换行缩进代表层级内容；不过呢，YAML及其注重空格，所以书写的时候需要格外谨慎，而JSON却不用担心空格问题。

    两者间的具体的转换可以这么分
JSON	YAML	JSON示例	YAML示例
逗号分隔	回车并设置格式缩进相同	{a,b}	a
			b
大括号用来集合多种值	换行缩进统一即可	{a:{k1:kk1},b:k2}	a:
			  k1:kk2
			b:k2
中括号代表数组	用- 键名写多列统一缩进即可	[ a:[k1,k2],b:k2 ]	- a:
			  - k1
			  - kk2
			- b:k2

     大致总结如上，在具体描述JSON和YAML格式的时候，有写例子，例子是等价关系，可以辅助理解













Jinja2

   模版基本语法
      1. 模板的表达式都是包含在分隔符"{{  }}"内的
      2. 控制语句都是包含在分隔符"{% %}"内的
      3. 模板支持注释,都是包含在分隔符"{# #}" 内,支持块注释
      4. 调用变量{{变量名}}
      5. 计算{{数值1 运算符号 数值2}}，例如{{1*2}}
      6. 可以使用过滤器进行修改，和Shell一样，使用符号 |  

   模块控制语句
{% if name == 'MySQL' %}
    关系型数据库
    {% for m in ["Mariadb","Oracle"] %}
          {{do m}}
{% elif name == 'Mongodb' %}
    非关系型数据库
{% elif name == 'Redis' %}
    非关系型内存数据库
{% else %}
    不可编写数据库
{% endif %}




ansible的七个操作

    1. ansible： 用于执行临时性的工作
    2. ansible-doc： ansible模块的文档说明
    3. ansible-console： ansible为用户提供的交互式工具
    4. ansible-galaxy： 从github上下载管理Roles的一款工具
    5. ansible-playbook： 日常应用中使用频率最高的命令
    6. ansible-vault： 主要用于配置文件加密
    7. ansible-pull： 适用于配置大批量机器的场景下，效率几乎可以无限提升,但对运维人员的技术水平和前瞻性规划有较高要求


playbook


playbook语法格式
   因为playbook死由YAML语言编写，所以语法格式遵循YAML标准
   playbook由一个或多个play组成，每个play中 hosts,variables,roles,tasks 等对象的表示方法都是键值中间以": "分隔表示

   注意YAML格式的文件开始行都应该是 --- ，这是YAML格式的一部分,表明一个文件的开始
   在使用的时候我们可以通过   ansible-doc 模块   来查看帮助信息，里面的EXAMPLES会有例子作为参考


playbook构成
hosts 内容是一个(多个)组或主机的patterns，以逗号为分隔符，如果使用all代表指代所有主机
remote_user	指定登陆使用的账户
target	定义将要执行playbook的远程主机组
variable	定义playbook运行时需要使用的变量
tasks	定义将要在远程主机上执行的任务列表
Handler	定义task执行完成以后需要调用的任务


   对于tasks模块注意点
       1. 每一个play包含了一个task列表(任务列表)
       2. 一个task在其所对应的所有主机上(通过 host pattern匹配的所有主机)执行完毕之后,下一个task才会执行
       3. 在一个play之中,所有hosts会获取相同的任务指令,这是play的一个目的所在,即将一组选出的hosts映射到task,执行相同的操作

   使用命令运行playbook文件：
       ansible-playbook yaml文件 [-f 并发进程个数上限]


示例：

# 测试所有的机器是否健康
vim ping.yml
---
- hosts: all
  remote_user: root
  tasks:
   - ping:


# 给web组的服务器安装配置httpd服务器，并修改其监听端口，开启服务器和设置开机自启动
vim ping.yml
---
- hosts: web
  remote_user: root
  tasks:
    - name: install the latest version of Apache
      yum:
        name: httpd
        state: present
    - lineinfile:
        path: /etc/httpd/conf/httpd.conf
        regexp: '^Listen'
        line: 'Listen 8080'
    - replace:
        path: /etc/httpd/conf/httpd.conf
        regexp: '#(ServerName).*'
        replace: '\1 www.lyu.com'
    - name: write http host file
      shell: echo 'hello world' >  /var/www/html/index.html
    - service:
        name: httpd
        state: started
    - service:
        name: httpd
        enabled: yes




语法进阶

   1. 使用变量参数
     1.1 用法格式： 用vars代表变量定义，用{{变量名}}调用
         例如：
---
- hosts: all
  remote_user: root
  vars:
     service: maraidb
  tasks:
     - name: install "{{service}}"
       yum: 
         name: {{service}}
         state: present
    - service:
         name: {{service}}
         state: started

     1.2 给简单变量通过命令参数进行赋值，例如上面这个yaml文件，为执行的时候想service变量变成httpd
ansible-playbook install.yml -e service="httpd"
ansible-playbook yml文件名 -e 参数名="设置的参数值"

     1.3 定义复杂变量，格式如下
---
- hosts: all
  remote_user: root
  vars:
     service: 
        name: "maraidb"
        free: "免费开源"
  tasks:
     - name: install "{{service.name}}" "{{service.free}}"
       yum: 
         name: {{service.name}}
         state: present
    - service:
         name: {{service.name}}
         state: started


   使用的时候调用：
      {{service.name}} 代表 maraidb
      {{service.free}} 代表 免费开源

     1.4 给复杂变量进行传参 (有两个方案)
        1.4.1 使用JSON格式上传参数数据
ansible-playbook install.yml -e "{"service":{"name":"oracle","free":"收费闭源"}}"
ansible-playbook yml文件名 -e "{"参数":{"参数字段1":"值","参数字段2":"值"}}"
        1.4.2 使用一个yml格式的文件进行传参

# 写一个yml文件(vars.yml)，然后以这个文件为参数传递到playbook中
service: 
  name: "oracle"
  free: "收费闭源"
ansible-playbook install.yml -e "@vars.yml(@刚刚取的文件名)"

     1.5 用于解决密码明文的问题：
         问题源： user模块的password常常设置密码失败，其原因是因为password是把字符串直接写入shadow,并没有改变,而Linux的shadow密码是经过加密的,所以不能使用。
         解决反感：通过管道进行过滤，这样下面的变量值就可以和user模块的password结合实现设置密码
{{ '密码明文' | password_hash('sha512')}}

例如：创建一个testuser用户，密码为123456，并要求其第一次登陆时修改密码
---
- hosts: all
  remote_user: root
  vars:
    username: testuser
  tasks:
    - name: create user "{{username}}"
      user: password={{'123456' |password_hash('sha512')}} name={{username}}
    - shell: chage -d 0 {{username}}


   2. 错误处理 error
      默认当ansible程序运行中，当某个命令执行后，$?返回值不是0，那么ansible会停止命令并返回error
      可是有的时候，我们需要忽略错误继续运行，忽略错误有两个操作
         一个方法是让命令后无论对错 $?都为0；这样ansible执行中不管是否有问题都不会报错
  shell: 执行的命令命令 || /bin/true
        另一个方法是通过参数设置，让ansible忽略error；会显示报错，而且只对所跟的这个shell生效 (推荐使用)
  shell: 执行的命令命令
  ignore_errors: True

   3. 逻辑处理 handlers(和task平级)
      避免有多次改变发生时每次都执行指定的操作,取而代之仅在所有的变化发生完成后一次性地执行指定操作
      可以理解为C、Java的函数，数据库中的存储对象，它是简化逻辑思路，只要要调用的时候写就好，不管写了多少个，再最后都将执行一次。
      但是它不是当读取的时候立刻执行，他是读取后，记录这个命令要执行，当tasks完整执行后再执行handlers的命令。
      注意：
         1. 使用notify调用的是handler段的name定义的串,必须一致,否则达不到触发的效果
         2. 多个task触发同一个notify的时候,同一个服务只会触发一次
         3. 而且notify可以触发多个条件,在生产环境中往往涉及到某一个配置文件的改变要重启若干服务的场景,handler用到这里非常适合
         4. 结合vars可以写出非常普适的服务管理脚本。

---
- hosts: all
  remote_user: root
  tasks:
    - name: config httpd.conf
      copy: 
        src=/root/playbook/httpd.conf
        dest=/etc/httpd/conf/httpd.conf
      notify:
        - restart httpd
    - name: write http host file
      shell: echo 'hello world' >  /var/www/html/index.html
  handlers:
    - name: restart httpd
      service: 
        name=httpd
        state=restarted

   4. 判断处理 when
      而when判断只对当前的所在的块有效

---
- name: Install httpd
  hosts: all
  tasks:
  - name: Install httpd via yum
    yum: name=httpd state=installed
    when: ansible_os_family == "RedHat"
  - name: Install VIM via apt
    apt: name=httpd state=installed
    when: ansible_os_family == "Debian"


   5. 获取保存值 register
      有时候我们还需要更复杂的例子,如判断前一个命令的执行结果去处理后面的操作,这时候就需要register模块来保存前一个命令的返回状态,在后面进行调用。
      可以和判断结合起来，把上一个命令的结果存在一个值中，然后进行when判断。

# 举例：对系统负载进行监测以及特殊处理，出现问题的话就报错
---
- hosts: all
  remote_user: root
  tasks:
    - shell: uptime |awk '{printf("%f\n",$(NF-2))}'
      register: result
    - shell: echo 'error, free is not enough' | mail -s 'Error' -u xxx@yy.com
      when: result.stdout|float > 0.5
    - service: 
        name=httpd
        state=stopped
      when: result.stdout|float > 0.8
# 其中 result.stdout|float 代表把数据改成数字


   6. 循环语句with_items
      可以理解为Linux的for循环，只不过是写在后面，而循环中的值由变量item代替。

---
- hosts: all
  remote_user: root
  tasks:
    - name: add users
      user: 
        name={{item.name}}
        group={{item.group}} 
        password={{'123456' |password_hash('sha512')}} 
      with_items:
        - {name: "test1", group: "root"}
        - {name: "test2", group: "root"}
        - {name: "test3", group: "bash"}
        - {name: "test4", group: "bash"}






   6. 嵌套循环 with_nested

---
- hosts: all
  remote_user: root
  vars:
    un: [a, b, c]
    id: [1, 2, 3]
  tasks:
    - name: add users
      shell: echo {{item}}
      with_nested:
        - "{{un}}"
        - "{{id}}"


组合与标记

   1. 标记 tags
      给指定的任务定义一个调用标识，而客户可以在操作端直接调用，使用 ansible-playbook yml文件内容 --tags=标记名

---
- hosts: all
  remote_user: root
  vars:
    soft: httpd
  tasks:
    - name: install {{soft}}
      yum: name={{soft}}
    - name: config httpd.conf
      copy: 
        src=/root/playbook/httpd.conf
        dest=/etc/httpd/conf/httpd.conf
    - name: config services
        copy: 
          src=/root/playbook/httpd.conf
          dest=/etc/httpd/conf/httpd.conf
    - name: restart services
          service: 
            name={{soft}}
            enabled=yes 
            state=restarted 
          tags: restartweb

# 执行的时候，只执行标记的那个块的内容
ansible-playbook yml文件内容 --tags=restartweb


   2. 获取其他yml文件中的内容 include and roles
      在编写 playbook 的时候随着项目越来越大，playbook越来越复杂，修改也很麻烦。
      这时可以把一些play、task 或handler放到其他文件中，通过include指令包含进来是一个不错的选择

      执行roles像是加强版的include，它可以引入一个项目的文件和目录

一般所需的目录层级有
vars	变量层
tasks	任务层
handlers	触发条件
files	文件
template	模板
default	默认,优先级最低



调试

   只是测试运行，不真实运行：  ansible-playbook -C --list-tasks --list-hosts
     显示受到影响的主机host     --list-hosts
     显示工作的task            --list-tasks
     显示将要运行的tag          --list-tags

---
- hosts: all
  remote_user: root
  tasks:
    - shell: uptime |awk '{printf("%f\n",$(NF-2))}'
      register: result
    - shell: touch /tmp/isreboot
      when: result.stdout|float > 0.5
    - name: Show debug info
      debug: var=result













